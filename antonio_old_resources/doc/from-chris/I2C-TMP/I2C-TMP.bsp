' {$STAMP BS2p}
' {$PBASIC 2.5}

' An example program to test I2C-TMP Digital Temperature Sensor.
' The program takes temperature reading every one second.
' The program work directly with I2C-TMP module.
' The program is written for address 0x90
'
' Document: TMP175 datasheet
' Updated: March 18, 2007
' E-mail: support@gravitech.us
' MicroResearch, Gravitech Group
' (C) Copyright 2007 All Rights Reserved
'
' NOTE: For BS2P, this program only work with firmware rev. 1.3 or grater.

#IF ($STAMP < BS2P) #THEN
  #ERROR "Program requires BS2p, BS2pe, or BS2px."
#ENDIF

'************************************************************

SDA  PIN 0       ' SDA pin
SCL  PIN 1       ' SCL pin
slvAddrWR CON $90  ' TMP175 device address write
slvAddrRD CON $91  ' TMP175 device address read

TempHi  VAR Byte    ' Variable hold data high byte
TempLo  VAR Byte    ' Variable hold data low byte
Decimal VAR Word    ' Variable hold decimal value
P_N     VAR Bit     ' Bit flag for Positive and Negative


MAIN:

  PAUSE 100

  I2COUT SDA, slvAddrWR, [1,%01100000]     ' Setup configuration register
                                           ' 12-bit
  I2COUT SDA, slvAddrWR, [0]               ' Setup Pointer Register to 0

ReadTemp:

  PAUSE 1000
  I2CIN SDA, slvAddrRD, [TempHi, TempLo]   ' Read temperature high byte and low byte
  GOSUB Cal_temp
  DEBUG "The temperature is "      ' Display temperature
    IF P_N = 0 THEN DEBUG "-"
  DEBUG DEC TempHi,"."
  DEBUG DEC4 Decimal
  DEBUG " degree C", CR, CR

  GOTO ReadTemp

  END

'**************************************************************
' Calculate temperature subroutine
'**************************************************************

Cal_temp:

  IF (TempHi.BIT7 = 1) THEN     ' if P_N = 0 means temperature is neg.
    P_N = 0
  ELSE                          ' else temperature is pos.
    P_N = 1
  ENDIF

  TempHi = TempHi & %01111111   ' Remove sign
  TempLo = TempLo & %11110000   ' Filter out last nibble
  TempLo = TempLo >>4            ' Shift right 4 times
  Decimal = TempLo
  Decimal = Decimal * 625       ' Each bit = 0.0625 degree C
  RETURN